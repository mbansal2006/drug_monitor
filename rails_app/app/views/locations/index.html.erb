<h1 class="text-2xl font-bold mb-4">Location Explorer</h1>
<div class="grid grid-cols-1 lg:grid-cols-3 gap-4 mb-4">
  <form method="get" action="<%= locations_path %>" class="space-y-2 col-span-1 lg:col-span-1 bg-white p-4 shadow rounded">
    <input type="text" name="q" value="<%= params[:q] %>" placeholder="Search address, country or DUNS" class="border p-2 w-full" />
    <input type="text" name="country" value="<%= params[:country] %>" placeholder="Country" class="border p-2 w-full" />
    <input type="text" name="state_or_region" value="<%= params[:state_or_region] %>" placeholder="State/Region" class="border p-2 w-full" />
    <input type="text" name="postal_code" value="<%= params[:postal_code] %>" placeholder="Postal Code" class="border p-2 w-full" />
    <select name="risk_bucket" class="border p-2 w-full">
      <option value="">All Risk Levels</option>
      <option value="low" <%= 'selected' if params[:risk_bucket]=='low' %>>Low (0-33)</option>
      <option value="medium" <%= 'selected' if params[:risk_bucket]=='medium' %>>Medium (34-66)</option>
      <option value="high" <%= 'selected' if params[:risk_bucket]=='high' %>>High (67+)</option>
    </select>
    <label class="block"><%= check_box_tag 'taa_compliant', '1', params[:taa_compliant].present? %> TAA Compliant</label>
    <label class="block"><%= check_box_tag 'ofac_sanctioned', '1', params[:ofac_sanctioned].present? %> OFAC Sanctioned</label>
    <label class="block"><input id="heat-toggle" type="checkbox" class="mr-2">Heatmap View</label>
    <button type="submit" class="bg-[#0052CC] text-white px-4 py-2 rounded w-full">Apply Filters</button>
  </form>
  <div id="map" class="h-96 lg:col-span-2 rounded shadow"></div>
</div>

<table class="min-w-full border bg-white shadow">
  <thead>
    <tr class="bg-gray-200">
      <th class="px-2 py-1 border">ID</th>
      <th class="px-2 py-1 border">Country</th>
      <th class="px-2 py-1 border">Risk Score</th>
    </tr>
  </thead>
  <tbody>
    <% @locations.each do |loc| %>
      <tr class="hover:bg-gray-50">
        <td class="border px-2 py-1"><%= link_to loc.id, location_path(loc) %></td>
        <td class="border px-2 py-1"><%= loc.country %></td>
        <td class="border px-2 py-1"><%= loc.risk_score %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const locations = <%= raw @locations_json %>;
    mapboxgl.accessToken = 'pk.eyJ1IjoibWJhbnNhbDA2IiwiYSI6ImNtOHRwNDB0dzA2bWYybHB0M3Q5NmltMnQifQ.SoIE1BpShnshj_AC7KI_uA';
    const map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/mapbox/streets-v12',
      center: [0, 20],
      zoom: 1
    });

    const markers = [];
    locations.forEach((loc) => {
      if (!loc.latitude || !loc.longitude) return;
      let color = 'green';
      if (loc.risk_score >= 67) {
        color = 'red';
      } else if (loc.risk_score >= 34) {
        color = 'yellow';
      }
      const el = document.createElement('div');
      el.className = 'w-3 h-3 rounded-full';
      el.style.backgroundColor = color;
      const marker = new mapboxgl.Marker(el)
        .setLngLat([loc.longitude, loc.latitude])
        .setPopup(new mapboxgl.Popup().setHTML(`<div class='p-2'><strong>${loc.country}</strong><br>${loc.address}<br>DUNS: ${loc.duns_number}<br>Risk: ${loc.risk_score}</div>`))
        .addTo(map);
      markers.push(marker);
    });

    const geojson = {
      type: 'FeatureCollection',
      features: locations.filter(l => l.latitude && l.longitude).map(l => ({
        type: 'Feature',
        properties: { risk: l.risk_score },
        geometry: { type: 'Point', coordinates: [l.longitude, l.latitude] }
      }))
    };

    map.on('load', () => {
      map.addSource('locations', { type: 'geojson', data: geojson });
      map.addLayer({
        id: 'heat',
        type: 'heatmap',
        source: 'locations',
        layout: { visibility: 'none' },
        paint: { 'heatmap-weight': ['interpolate', ['linear'], ['get', 'risk'], 0, 0, 100, 1] }
      });
    });

    const toggle = document.getElementById('heat-toggle');
    toggle.addEventListener('change', () => {
      const visible = toggle.checked;
      map.setLayoutProperty('heat', 'visibility', visible ? 'visible' : 'none');
      markers.forEach(m => visible ? m.remove() : m.addTo(map));
    });
  });
</script>
